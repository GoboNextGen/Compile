#!/bin/bash
waf_init() {
   waf="./waf"
   build_target="build"
}


waf_do_configuration() {
   if [ ! "$override_default_options" = "yes" ]
   then
      eval $(Combine_Arrays wafconfig waf_options userconfigureoptions)
      wafconfig=(configure --prefix="$target" "${wafconfig[@]}")
   else
      wafconfig=("${waf_options[@]}")
   fi
   Add_Use_Flags_Options_To_Array wafconfig

   [ -f "$waf" ] && chmod +x "$waf" 2>/dev/null
   (
      for i in "${waf_variables[@]}"
      do
         var=`echo $i | cut -d= -f 1`
         val=`echo $i | cut -d= -f 2-`
         eval export $var=\'$val\'
      done
      
      $waf "${wafconfig[@]}" || return 1
   ) || return 1  
}

waf_do_build() {
   if [ ! -z "$goboIndex" ]
   then waf_variables=(`echo ${waf_variables[@]} | sed "s,$target,$goboIndex,g"`)
   fi

   $waf "${waf_variables[@]}" "${build_variables[@]}" $build_target || wrap_fail "Build failed."
}

waf_do_install() {
   SandboxInstall $verbose ${unmanagedlist:+--unmanaged-files "${unmanagedlist}"} ${sandboxopts:+"${sandboxopts[@]}"} -c "$waf" "$appname" "$versionnumber" -- "${waf_variables[@]}" "${install_variables[@]}" $install_target || wrap_fail "Installation failed"
}
