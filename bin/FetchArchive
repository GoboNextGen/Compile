#!/bin/bash

##################################################
# Imports
##################################################

. ScriptFunctions
Import OptionParser
Import File
Import Terminal
Import GoboLinux
Import Array

##################################################
# Options and configuration
##################################################

Parse_Conf Compile.conf
Import Compile

helpOnNoArguments=yes
scriptDescription="Given a recipe, download the files required to compile it."
scriptUsage="<recipe> [arch-recipe]"
scriptExample="$compileRecipeDir/K3B/0.10/Recipe"
Add_Option_Entry   "d" "save-directory" "Rename the directory into which the archive is unpacked/files checked out." ""
Add_Option_Entry   "s" "save-to" "Save the files to the given directory" "$compileArchivesDir"
Add_Option_Entry   "P" "program" "Program name" "Bash"
Add_Option_Entry   "V" "version-number" "Version number with revision" "4.0-r1"
Add_Option_Boolean "b" "batch" "Avoid asking questions."
Add_Option_Boolean "" "no-check-certificate" "Do not check certificates when downloading files. NOTE: This can be dangerous!"
Add_Option_Boolean "" "no-verify-files" "Do not verify downloaded files, this flag is normally passed when creating a new recipe"
Parse_Options "$@"

savedir=$(Entry "save-to")
sourcedir=$(Entry "save-directory")
programname=$(Entry "program")
versionnumber=$(Entry "version-number")

wget_bin="wget"
git_bin="git"
if Boolean "no-check-certificate"
then
    Log_Normal "NOTE: Ignoring certificates when downloading sources"
    wget_bin="wget --no-check-certificate"
    git_bin="GIT_SSL_NO_VERIFY=true git"
fi

##################################################
# Fundamental variables
##################################################

recipe="$(Arg 1)"
[ "$recipe" ] || Die "Missing argument. Usage: $scriptName <recipe>. See --help."
[ -e "$recipe" ] || Die "File not found: $recipe"
. "$recipe"

archrecipe="$(Arg 2)"
[ -e "$archrecipe" ] && source "$archrecipe"

[ -z "${sourcedir}" ] && sourcedir="${dir%%/*}"

##################################################
# Get sources
##################################################

for var in url mirror_url file file_size file_md5 file_sha cvs cvs_module svn git bzr hg
do
   eval '
      if [ -n "$'$var'" -a ! -n "${'$var's[*]}" ]
      then '$var's=("$'$var'")
      fi
   '
done

[ ! -w "${savedir}" -o ! -x "${savedir}" ] && chown `whoami` "${savedir}"

savesourcedir="${sourcedir}"
[ -z "${sourcedir}" ] && sourcedir="$(echo ${recipe} | sed 's,.*/\([^/]*\)/\([^/]*\)/Recipe,\1-\2,')"

[ -d "${sourcedir}" ] && [ ! -w "${sourcedir}" -o ! -x "${sourcedir}" ] && chown -R `whoami` "${sourcedir}"

cd "$savedir"

if [ "${cvss[*]}" ]
then
   for cvs in "${cvss[@]}"
   do
      if echo "$cvs" | grep -q " "
      then
         origcvs="$cvs"
         cvs="${origcvs% *}"
         cvs_modules=("${origcvs#* }")
      fi
      if [ "$cvs_password" ]
      then Log_Normal "When asked for a password, enter \"$cvs_password\"."
      else Log_Normal "If asked for a password, just press Enter."
      fi

      login_method=`echo ${cvs} | cut -b-5`
      [ "$cvs_rsh" ] && export CVS_RSH=$cvs_rsh || export CVS_RSH=ssh
      [ "$login_method" != ":ext:" ] && cvs -d${cvs} login || exit $?
      for cvs_module in "${cvs_modules[@]}"
      do
         checkout_dir=`basename "$sourcedir"`
         cvs -d${cvs} ${cvs_opts} ${cvs_options} checkout -d"$checkout_dir" ${cvs_checkout_options} ${cvs_module} || exit $?
      done
   done
   exit 0
elif [ "${svns[*]}" ]
then
   for svn in "${svns[@]}"
   do
      if [ "$svn_username" ]
      then svn checkout "${svn}" "${sourcedir}" --username "${svn_username}" --password "${svn_password}" || exit $?
      else svn checkout "${svn}" "${sourcedir}" || exit $?
      fi
   done
   exit 0
elif [ "${gits[*]}" ]
then
   for git in "${gits[@]}"
   do
      bflag=""
      if [ "${branch}" ]
      then bflag="-b ${branch}"
      elif [ "${tag}" ]
      then bflag="-b ${tag}"
      fi
      if [ ! -d "${sourcedir}" ]
      then
         $git_bin clone --depth=1 ${bflag} "${git}" "${sourcedir}" || exit $?
         cd "${sourcedir}" && $git_bin submodule update --init || true
      else cd "${sourcedir}" && $git_bin pull || exit $?
      fi
   done
   exit 0
elif [ "${bzrs[*]}" ]
then
   for bzr in "${bzrs[@]}"
   do
      if [ ! -d "${sourcedir}" ]
      then bzr branch "${bzr}" "${sourcedir}" || exit $?
      else cd "${sourcedir}" && bzr pull || exit $?
      fi
   done
   exit 0
elif [ "${hgs[*]}" ]
then
   for hg in "${hgs[@]}"
   do
      if [ ! -d "${sourcedir}" ]
      then hg clone ${hg} "${sourcedir}" || exit $?
      else cd "${sourcedir}" && hg update || exit $?
      fi
   done
   exit 0
elif ! [ -n "${urls[*]}" ]
then
   Die "Missing URL in recipe '$recipe'."
else
   sourcedir="${savesourcedir}"
fi

if ! [ "${files[*]}" ]
then files=(`Map basename "${urls[@]}"`)
fi

if [ ! -z ${file_shas} ];
then
    file_sums=${file_shas}
    use_sha=1
else
    file_sums=${file_md5s}
    use_sha=0
fi

for url_index in `seq 0 $[${#urls[@]}-1]`
do
   file="${files[url_index]}"
   [ -f "${file}" -a ! -w "${file}" ] && chown `whoami` "$file"
   # First verification to know if we need to download it again
   if Boolean "no-verify-files"
   then
      if [ -f "${file}" ]
      then result=2 # incomplete
      else result=3 # missing
      fi
   else
      Verify_Files "$file" "${file_sizes[url_index]}" "${file_sums[url_index]}" $use_sha
      result=$?
   fi
   # File was ok
   if [ "$result" = "0" ]
   then
      continue
   # File was corrupted, delete it
   elif [ "$result" = "1" ]
   then
      Log_Normal "File $file is corruped, downloading it again!"
      rm -f -- ${file}
   elif [ "$result" = "2" ]
   then
      if Boolean "batch" || { Log_Normal "File ${file} has been already downloaded"; Ask "Remove and download again?"; }
      then rm -f ${file}
      else continue
      fi
   fi

   function wget_url() {
      fileindex=$1
      mirrorlevel=$2
      urlcount="${#urls[@]}"
      if [ "$mirrorlevel" = 0 ]
      then fetch="${urls[fileindex]}"
      else fetch="${mirror_urls[(mirrorlevel-1)*urlcount+fileindex]}"
      fi
      if [ -z "$fetch" ]
      then
         # No more mirrors in recipe
         if [ -n "$programname" -a -n "$versionnumber" ]
         then
            version_no_rev="${versionnumber%-r*}"
            # Try gobolinux.org mirror
            $wget_bin -O "$file" -c --passive-ftp "https://gobolinux.org/mirror_url/$programname/$version_no_rev/$file"
            return $?
         else
            return 1
         fi
      fi
      local file="${files[fileindex]}"
      unset LANG LC_ALL # So that wget's output is not translated
      if [ -e "$file" ]
      then
         if Starts_With "http:" "$fetch"
         then
            expectedlength=`$wget_bin --spider "$fetch" 2>&1 | grep "Length:" | tr -d ".," | cut -d" " -f2`
            locallength=`wc -c "$file" | cut -d" " -f1`
            if [ "$expectedlength" = "$locallength" ]
            then
               Log_Verbose "$file is already fully retrieved."
               return 0
            fi
         fi
      fi
      $wget_bin -O "$file" -c --passive-ftp "$fetch" || {
         wget_url "$fileindex" "$[mirrorlevel+1]"
      }
   }

   # Note: calling this function modifies the value of $file!
   wget_url "$url_index" 0 || {
      Die "Could not fetch '$url'."
   }

   # Verify the new downloaded file
   # Since file variable has been modified by wget_url(!?) we need to
   # set it again
   if Boolean "no-verify-files"
   then
      result=0
   else
      file=${files[url_index]}
      Verify_Files "$file" "${file_sizes[url_index]}" "${file_sums[url_index]}" $use_sha
      result=$?
   fi
   case $result in
   1) Die "File $file is corrupted. Exiting." ;;
   2) Die "File $file is incomplete. Exiting." ;;
   3) Die "Files $file is not available. Exiting." ;;
   esac
done
